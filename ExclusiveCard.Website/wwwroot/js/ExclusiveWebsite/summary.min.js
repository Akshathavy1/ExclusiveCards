var Summary = function () { "use strict"; var e, a = "Date", s = "asc", r = !1; function n(r) { var n = $("#MembershipCardId").val(), t = $("#PartnerType").val(), d = "Account Overview"; "Account Overview" === e ? d = "Transactions/?page=" + r + "&sortField=" + a + "&sortDirection=" + s + "&partnerType=" + t : "Withdraw Funds" === e ? d = "Withdraw/?country=" + countrySelected + "&membershipCardId=" + n + "&partnerType=" + t : "Preferences" === e ? d = "Account/?membershipCardId=" + n : "Help" === e ? d = "Help" : "Account" === e ? d = "Account/?membershipCardId=" + n : "Account Package" === e ? d = "Package/" : "Settings" === e && (d = "Settings/"), $.ajax({ url: "/MyAccount/" + d, beforeSend: function () { }, type: "GET", cache: !1, complete: function () { }, success: function (a) { if (null !== a) { if ($("#divTransactions").html(a), "Account Overview" === e ? ($("#bannerHeader").css("display", "block"), $("#divWithdrawals").css("display", "block")) : ($("#bannerHeader").css("display", "none"), $("#divWithdrawals").css("display", "none")), "Withdraw Funds" === e) { var s = parseFloat($("#AvailableFund").val()), r = $("#RequestExists").val(); 0 === s && $("#btnWithdraw").attr("disabled", !0), "True" !== r && "true" !== r || ($("#btnWithdraw").attr("disabled", !0), $("#successMsg").removeClass("hideContent"), $("#successMsg").html("Withdrawal request is in Processing. Cannot create new request.")), $("#error-name").hide(), $("#error-number").hide(), $("#error-sortcode").hide(), $("#error-password").hide(), $("#error-validSortCode").hide() } } else alert("Some error occurred. Please try again."); o() }, error: function (e, a, s) { alert(e.responseText) } }) } function t(e, a) { var s, r, n = []; for (s = 0, r = e.length; s < r; s += a)n.push(e.substr(s, a)); return n } function o() { $("a, button").click(function () { $(this).toggleClass("active") }), $("._link").unbind().click(function (a) { a.preventDefault(), $.each($("._link"), function (e, a) { $("a").removeClass("--active") }), $(this).addClass("--active"), "Settings" === (e = $(this)[0].text) && $.each($("._sub-link"), function (e, a) { "Account" === a.innerText && $(a).addClass("--active") }), "Logout" !== e && "Account Boost" !== e && n(1) }), $("._sub-link").unbind().click(function (a) { a.preventDefault(), $.each($("._sub-link"), function (e, a) { $("a").removeClass("--active") }), $(this).addClass("--active"), e = $(this).context.innerText; var s = $(this).parent().parent().parent()[0].firstElementChild; $(s).addClass("--active"), n(1) }), $("#divTransactions #pager a").each(function () { $(this).click(function (r) { r.preventDefault(), a = $("#SortField").val(), s = $("#SortDirection").val(); var t = $(this).attr("pagenumber"); e = "Transactions", n(t) }) }), $(".transactionHeading").each(function () { $(this).click(function (r) { r.preventDefault(), a = this.childNodes[0].attributes.SelSortField.value, s = $("#SortField").val() === a && "asc" === $("#SortDirection").val() ? "desc" : "asc", e = "Transactions", n(1) }) }), $("#btnLogout").unbind().click(function (e) { e.preventDefault(), $.get("/Account/Logout", "", function (e, a, s) { e.success ? window.location.href = "/home" : toastr.error(e.errorMessage) }) }), $("#btnWithdraw").unbind().click(function (e) { e.preventDefault(), $(this).toggleClass("active"), $(this).prop("disabled", !0); var a, s, r, n, o, d, i, l, c, u, p = function () { var e = !0, a = $("#Name").val(), s = $("#AccountNumber").val(), r = $("#SortCode").val(), n = $("#Password").val(); if (null == a || "" === a.trim() ? ($("#Name").addClass("--invalid"), e = !1) : $("#Name").removeClass("--invalid"), null == s || "" === s.trim() ? ($("#AccountNumber").addClass("--invalid"), e = !1) : $("#AccountNumber").removeClass("--invalid"), null == r || "" === r.trim() ? ($("#SortCode").addClass("--invalid"), e = !1) : $("#SortCode").removeClass("--invalid"), null == n || "" === n.trim() ? ($("#Password").addClass("--invalid"), e = !1) : $("#Password").removeClass("--invalid"), null != r && "" === r.trim() && r.length > 0) { if (r.removeClass("--invalid"), 6 === r.length) { var o = t(a, 2).join("-"); $("#SortCode").val(o) } /^(?!(?:0{6}|00-00-00))(?:\d{6}|\d\d-\d\d-\d\d)$/.test(r) || (e = !1, $("#SortCode").addClass("--invalid"), $("#error-validSortCode").show()) } return e }(), h = $("#withdrawal_amount").val(), v = $("#AvailableFund").val(); if (null != h && null != v) { var C = parseFloat(h).toFixed(2), m = parseFloat(v).toFixed(2); parseFloat(C) > parseFloat(m) && ($("#withdrawal_amount").addClass("--invalid"), $("#ErrorMsg").removeClass("hideContent"), p = !1, $(this).toggleClass("active"), $(this).prop("disabled", !1)) } null != h && 0 != parseFloat(h) || ($("#withdrawal_amount").addClass("--invalid"), $("#ErrorMsg").removeClass("hideContent"), p = !1, $(this).toggleClass("active"), $(this).prop("disabled", !1)), !0 === p ? (a = new FormData, s = $("#CustomerId").val(), r = $("#BankDetailId").val(), n = $("#PartnerRewardId").val(), o = $("#withdrawal_amount").val(), d = $("#Name").val(), i = $("#AccountNumber").val(), l = $("#SortCode").val(), c = $("#Password").val(), u = $("#PartnerType").val(), a.append("CustomerId", s), a.append("BankDetailId", r), a.append("PartnerRewardId", n), a.append("WithdrawAmount", o), a.append("Name", d), a.append("AccountNumber", i), a.append("SortCode", l), a.append("Password", c), a.append("PartnerType", u), $.ajax({ url: "/MyAccount/RequestWithdrawal", beforeSend: function () { $(".spinner").show() }, type: "Post", data: a, contentType: !1, processData: !1, cache: !1, complete: function () { $(".spinner").hide() }, success: function (e) { e.success ? ($("#successMsg").removeClass("hideContent"), $("#errorMsg").hasClass("hideContent") || $("#errorMsg").addClass("hideContent")) : ($("#successMsg").hasClass("hideContent") || $("#successMsg").addClass("hideContent"), $("#errorMsg").hasClass("hideContent") && $("#errorMsg").removeClass("hideContent"), $("#btnWithdraw").prop("disabled", !1)) }, error: function (e, a, s) { $(".spinner").hide(), $("#btnWithdraw").prop("disabled", !1) } }), $(this).toggleClass("active")) : ($(this).toggleClass("active"), $(this).prop("disabled", !1)), window.scrollTo(0, 100) }), $("#Name").unbind().change(function (e) { e.preventDefault(), $(this).val().length > 0 ? ($(this).removeClass("border-red"), $("#error-name").hide()) : ($(this).addClass("border-red"), $("#error-name").show()) }), $("#AccountNumber").unbind().change(function (e) { e.preventDefault(), $(this).val().length > 0 ? ($(this).removeClass("border-red"), $("#error-number").hide()) : ($(this).addClass("border-red"), $("#error-number").show()) }), $("#SortCode").change(function (e) { e.preventDefault(); var a = $(this).val(); if (a.length > 0) { if ($(this).removeClass("--invalid"), $("#ErrorMsg").addClass("hideContent"), 6 === a.length) { var s = t(a, 2).join("-"); $(this).val(s) } /^(?!(?:0{6}|00-00-00))(?:\d{6}|\d\d-\d\d-\d\d)$/.test(a) || ($(this).addClass("--invalid"), $("#ErrorMsg").removeClass("hideContent")) } else $(this).addClass("--invalid"), $("#ErrorMsg").removeClass("hideContent") }), $("#Password").unbind().change(function (e) { e.preventDefault(), $(this).val().length > 0 ? ($(this).removeClass("border-red"), $("#error-password").hide()) : ($(this).addClass("border-red"), $("#error-password").show()) }), $("#withdraw").change(function (e) { e.preventDefault(); var a = $(this).val(), s = $("#balance").val(); parseFloat(a) > parseFloat(s) ? toastr.error("Please select the amount less than or equal to available fund to withdraw.") : null !== a && "" !== a && $("#remaining").val(parseFloat(s) - parseFloat(a)) }), $("#personal").unbind().click(function (e) { e.preventDefault(), $(this).prop("disabled", !0); var a = new FormData, s = !0, r = $("#NationalInsuranceNumber").val(), n = ""; null != r && "" !== r && (n = r.replace(/ /g, ""), new RegExp("^([a-zA-Z]){2}( )?([0-9]){2}( )?([0-9]){2}( )?([0-9]){2}( )?([a-zA-Z]){1}?$").test(n) || ($("#personalError").html("National insurance number is invalid."), $("#NationalInsuranceNumber").focus(), $("#personalError").removeClass("hideContent"), s = !1, $("#personal").prop("disabled", !1))); s && (a.append("CustomerId", $("#CustomerId").val()), a.append("ContactDetailId", $("#ContactDetailId").val()), a.append("Forename", $("#Forename").val()), a.append("Surname", $("#Surname").val()), a.append("Email", $("#Email").val()), a.append("DateOfBirth", $("#DateOfBirth").val()), a.append("Postcode", $("#Postcode").val()), a.append("NationalInsuranceNumber", n), a.append("Address1", $("#Address1").val()), a.append("Address2", $("#Address2").val()), a.append("Address3", $("#Address3").val()), a.append("District", $("#District").val()), a.append("Town", $("#Town").val()), $.ajax({ url: "/MyAccount/Update", beforeSend: function () { $(".spinner").show() }, type: "Post", data: a, contentType: !1, processData: !1, cache: !1, complete: function () { $(".spinner").hide() }, success: function (e) { e.success ? ($("#personalSuccess").html("Personal details updated successfully."), $("#personalSuccess").focus(), $("#personalSuccess").hasClass("hideContent") && $("#personalSuccess").removeClass("hideContent"), $("#personalError").hasClass("hideContent") || $("#personalError").addClass("hideContent"), $("#personal").prop("disabled", !1), null != n && "" !== n && $("#niNNumber").addClass("--met")) : ($("#personalError").html(e.errorMessage), $("#personalError").focus(), $("#personalError").hasClass("hideContent") && $("#personalError").removeClass("hideContent"), $("#personal").prop("disabled", !1)), window.scrollTo(0, 100) }, error: function (e, a, s) { $("#personalError").html(data.errorMessage), $("#personalError").focus(), $("#personalError").hasClass("hideContent") && $("#personalError").removeClass("hideContent"), $("#personal").prop("disabled", !1), window.scrollTo(0, 100) } })) }), $("#password").unbind().click(function (e) { e.preventDefault(), $(this).prop("disabled", !0); var a = new FormData, s = !0, r = "", n = $("#CurrentPassword").val(), t = $("#NewPassword").val(), o = $("#ConfirmPassword").val(); null != n && "" !== n || (r = "Current password is required.", s = !1), null != t && "" !== t || (r.length > 0 ? r += "<br />New password is required" : r = "New password is required.", s = !1), null != o && "" !== o || (r.length > 0 ? r += "<br />Confirm password is required" : r = "Confirm password is required.", s = !1), new RegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,48}$").test(t) || (s = !1, $("#ConfirmPassword").hasClass("--invalid") || $("#ConfirmPassword").addClass("--invalid"), $("#Password").hasClass("--invalid") || $("#Password").addClass("--invalid")), s ? (a.append("CurrentPassword", n), a.append("NewPassword", t), a.append("ConfirmPassword", o), $.ajax({ url: "/MyAccount/UpdatePassword", beforeSend: function () { $(".spinner").show() }, type: "Post", data: a, contentType: !1, processData: !1, cache: !1, complete: function () { $(".spinner").hide() }, success: function (e) { e.success ? ($("#passwordSuccess").html("Password changed successfully."), $("#passwordSuccess").focus(), $("#passwordSuccess").hasClass("hideContent") && $("#passwordSuccess").removeClass("hideContent"), $("#passwordError").hasClass("hideContent") || $("#passwordError").addClass("hideContent")) : ($("#passwordError").html(e.errorMessage), $("#passwordError").hasClass("hideContent") && $("#passwordError").removeClass("hideContent")), $("#password").prop("disabled", !1) }, error: function (e, a, s) { $("#passwordError").html(data.errorMessage), $("#passwordError").focus(), $("#passwordError").hasClass("hideContent") && $("#passwordError").removeClass("hideContent"), $("#password").prop("disabled", !1) } })) : ($("#passwordError").html(r), $("#passwordError").focus(), $("#passwordError").hasClass("hideContent") && $("#passwordError").removeClass("hideContent"), $("#password").prop("disabled", !1)) }), $("#NewPassword, #ConfirmPassword").keyup(d), $(".niNumber").unbind().click(function (a) { a.preventDefault(), $.each($("._link"), function (e, a) { "Settings" == a.innerHTML ? $(this).addClass("--active") : $(this).removeClass("--active") }), e = "Settings", n(1) }), $("#submitOrderPayment").unbind().submit(function (e) { return $("#btnPayPalOrder").prop("disabled", !0), r ? (r = !1,!0): (a = $("#MembershipPlanId").val(), $.ajax({ url: "/PayPal/PayPalRequestUpgradeAccount", beforeSend: function(){ }, type: "POST", data: { MembershipPlanId: a }, cache: !1, complete: function() { }, success: function(e) { console.log(e), e.success ? ($("#customerPaymentProviderId").val(e.data), r = !0, $("#submitOrderPayment").submit()) : $("#btnPayPalOrder").prop("disabled", !1) }, error: function(e, a, s) { $("#btnPayPalOrder").prop("disabled", !1) } }), !1); var a }) }function d() { $("#NewPassword").val() != $("#ConfirmPassword").val() ? ($("#passwordError").html("Passwords do not match!"), $("#passwordError").hasClass("hideContent") && $("#passwordError").removeClass("hideContent")) : $("#passwordError").hasClass("hideContent") || $("#passwordError").addClass("hideContent") } return { setUpEvents: o, loadPartialView: function () { $.each($("._link"), function (e, a) { $("a").removeClass("--active") }), $("a._link:contains('Account Package')").addClass("--active"), e = "Account Package", n(1) }, paymentSuccess: function (e) { $.ajax({ url: "/MyAccount/Investment", beforeSend: function () { }, type: "POST", data: { customerPaymentId: e }, cache: !1, complete: function () { }, success: function (e) { console.log(e) }, error: function (e, a, s) { console.log(e + s) } }) } }}();