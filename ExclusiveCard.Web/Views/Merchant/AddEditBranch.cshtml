@model ExclusiveCard.WebAdmin.ViewModels.BranchViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Merchant Branch";
    ViewBag.FormTitle = Model.MerchantName + " Branch";
}

@using (@Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div id="mainDiv" class="col-md-10 form-horizontal">
        @Html.ValidationSummary(false, "", new { @class = "text-danger", autofocus = "autofocus" })
        @Html.HiddenFor(model => model.MerchantId)
        @Html.HiddenFor(model => model.ContactDetailsId)
        
        @if (@Model.Id > 0)
        {
            <div class="form-group row">
                @Html.LabelFor(m => m.Id, htmlAttributes: new {@class = "control-label col-md-3"})
                <div class="col-md-5">
                    @Html.EditorFor(model => model.Id, new {htmlAttributes = new {@class = "form-control roundedInput col-md-6", @readonly = "readonly"}})
                    @Html.ValidationMessageFor(model => model.Id, "", new {@class = "text-danger"})
                </div>
            </div>
        }

        <div class="form-group row">
            @Html.LabelFor(model => model.Mainbranch, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.CheckBoxFor(model => model.Mainbranch, htmlAttributes: new { @class = "" })
            </div>
        </div>
        <div class="form-group row">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control roundedInput", maxlength = 128 } })
                <p class="pull-right navpatterns">(Max limit 128 Characters)</p>
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            @Html.LabelFor(model => model.ShortDescription, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.ShortDescription, new { htmlAttributes = new { @class = "form-control roundedInput", maxlength = 128 } })
                <p class="pull-right navpatterns">(Max limit 128 Characters)</p>
                @Html.ValidationMessageFor(model => model.ShortDescription, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            @Html.LabelFor(model => model.LongDescription, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.TextAreaFor(model => model.LongDescription, htmlAttributes: new { @class = "form-control roundedInput txtarea", @rows = "2", maxlength = 512 })
                <p class="pull-right navpattern">(Max limit 512 Characters)</p>
                @Html.ValidationMessageFor(model => model.LongDescription, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            @Html.LabelFor(model => model.ContactDetail.Address1, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.ContactDetail.Address1, new { htmlAttributes = new { @class = "form-control roundedInput" } })
                @Html.ValidationMessageFor(model => model.ContactDetail.Address1, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            @Html.LabelFor(model => model.ContactDetail.Address2, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.ContactDetail.Address2, new { htmlAttributes = new { @class = "form-control roundedInput" } })
                @Html.ValidationMessageFor(model => model.ContactDetail.Address2, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            @Html.LabelFor(model => model.ContactDetail.Address3, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.EditorFor(model => model.ContactDetail.Address3, new { htmlAttributes = new { @class = "form-control roundedInput" } })
                @Html.ValidationMessageFor(model => model.ContactDetail.Address3, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            @Html.LabelFor(model => model.ContactDetail.Town, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.EditorFor(model => model.ContactDetail.Town, new { htmlAttributes = new { @class = "form-control roundedInput" } })
                @Html.ValidationMessageFor(model => model.ContactDetail.Town, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            @Html.LabelFor(model => model.ContactDetail.District, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.EditorFor(model => model.ContactDetail.District, new { htmlAttributes = new { @class = "form-control roundedInput" } })
                @Html.ValidationMessageFor(model => model.ContactDetail.District, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            @Html.LabelFor(model => model.ContactDetail.PostCode, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.EditorFor(model => model.ContactDetail.PostCode, new { htmlAttributes = new { @class = "form-control roundedInput col-md-6" } })
                @Html.ValidationMessageFor(model => model.ContactDetail.PostCode, "", new { @class = "text-danger col-md-12" })
            </div>
        </div>
        <div class="form-group row">
            @Html.LabelFor(model => model.ContactDetail.CountryCode, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.DropDownListFor(model => model.ContactDetail.CountryCode, Model.SelectCountry, htmlAttributes : new { @class = "form-control roundedInput col-md-6" })
                @Html.ValidationMessageFor(model => model.ContactDetail.CountryCode, "", new { @class = "text-danger col-md-12" })
            </div>
        </div>
        <div class="form-group row">
            @Html.LabelFor(model => model.ContactDetail.Latitude, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.EditorFor(model => model.ContactDetail.Latitude, new { htmlAttributes = new { @class = "form-control roundedInput col-md-6" } })
                @Html.ValidationMessageFor(model => model.ContactDetail.Latitude, "", new { @class = "text-danger col-md-12" })
            </div>
        </div>
        <div class="form-group row">
            @Html.LabelFor(model => model.ContactDetail.Longitude, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.EditorFor(model => model.ContactDetail.Longitude, new { htmlAttributes = new { @class = "form-control roundedInput col-md-6" } })
                @Html.ValidationMessageFor(model => model.ContactDetail.Longitude, "", new { @class = "text-danger col-md-12" })
            </div>
        </div>
        <div class="form-group row">
            @Html.LabelFor(model => model.ContactDetail.LandlinePhone, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.EditorFor(model => model.ContactDetail.LandlinePhone, new { htmlAttributes = new { @class = "form-control roundedInput",maxlength=16 } })
                 <p class="pull-right navpatterns">(Max limit 16 Characters)</p>
                @Html.ValidationMessageFor(model => model.ContactDetail.LandlinePhone, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            @Html.LabelFor(model => model.ContactDetail.MobilePhone, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.EditorFor(model => model.ContactDetail.MobilePhone, new { htmlAttributes = new { @class = "form-control roundedInput",maxlength=16 } })
                <p class="pull-right navpatterns">(Max limit 16 Characters)</p>
                @Html.ValidationMessageFor(model => model.ContactDetail.MobilePhone, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            @Html.LabelFor(model => model.DisplayOrder, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.EditorFor(model => model.DisplayOrder, new { htmlAttributes = new { @class = "form-control roundedInput col-md-6" } })
                @Html.ValidationMessageFor(model => model.DisplayOrder, "", new { @class = "text-danger col-md-12" })
            </div>
        </div>
        <div class="form-group row">
            @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.TextAreaFor(model => model.Notes, htmlAttributes: new { @class = "form-control roundedInput", @rows = "3", maxlength = 200 })
                <p class="pull-right navpattern">(Max limit 200 Characters)</p>
                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group col-md-12">
            <div class="form-group col-md-6">
                <button type="button" id="btnCancelBranch" class="btn">Cancel</button>
            </div>
            <div class="form-group col-md-6">
                <button type="button" id="btnSaveBranch" class="btn has-spinner pull-right">
                    Save<span class="spinner"><i class="fa fa-spinner fa-spin"></i></span>
                </button>
            </div>
        </div>
    </div>
    <div id="dialog-confirm" title="Delete Confirmation">
        <p id="infoMessage"></p>
    </div>
}
@section Scripts
{
    <script src="~/js/Exclusive/merchant.js"></script>
    <script type="text/javascript">
        Merchant.setUpEvents();
    </script>
}




